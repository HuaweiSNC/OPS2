##----------------------------------------------------------------------------------------------------------------------
##-- Copyright (C) Huawei Technologies Co., Ltd. 2008-2011. All rights reserved.
##----------------------------------------------------------------------------------------------------------------------
##----------------------------------------------------------------------------------------------------------------------
##--Project Code    : VRPV8
##--File name       : isdklib.py
##--Author          :
##--Description     : File consist of REST api handlers
##----------------------------------------------------------------------------------------------------------------------
##--History:
##--Date                 Author                 Modification
##--04-03-2013             Ganesh                 created file.
##----------------------------------------------------------------------------------------------------------------------

# import sys
import os
# import json
     ##user defined symbols
# import xml2xpath
import config
import logging
try:
    from lxml import etree
except ImportError:
    import xml.etree.ElementTree as etree

import urllib
#import json
# from lxml import objectify


logger = logging.getLogger("ops.isdklib")  
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_sendrecv_ncclient
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function handles sending and receiving of RPC (request and reply)
##-- Input           : sessObj --> Session object on which the request and reply is received
##--                   srpcstring --> Edit-config/get/action schema RPC request string
##--                   srestOperType -->  operation based on REST api handle
##--                   shwcontext --> for the ls vs (hwcontext)
##--
##-- Output          : RPC reply
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_sendrecv_ncclient(sessObj, srpcstring,shwcontext, srestOperType):
    
    logger.debug('isdk_sendrecv_ncclient: REST operation: %s', srestOperType)
    logger.debug('isdk_sendrecv_ncclient: Session object: %s', sessObj)
    if config.POST == srestOperType or config.PUT == srestOperType or config.DELETE == srestOperType :
        sRollback,srpc = srpcstring.split('&')## the default understanding of the operation
        return sessObj.edit_config(shwcontext,target='running',config=srpc,default_operation ="merge",error_option=sRollback)
    elif config.GET == srestOperType:
        return sessObj.get(shwcontext,filter=srpcstring)
    elif config.ACTION == srestOperType:
        return sessObj.execute_action(shwcontext,actionreq=srpcstring)
    elif config.GETCONFIG == srestOperType:
        return sessObj.get_config(shwcontext,source='running',filter=srpcstring)
    elif config.COPYCONFIG == srestOperType:
        srpcTarget,srpcSource = srpcstring.split('&')
        return sessObj.copy_config(shwcontext,source=str(srpcSource),target=str(srpcTarget))
    elif config.DELETECONFIG == srestOperType:
        return sessObj.delete_config(shwcontext,target=str(srpcstring))
    elif config.KILLSESSION == srestOperType:
        return sessObj.kill_session(shwcontext,session_id=str(srpcstring))
    else:
        logger.debug('isdk_sendrecv_ncclient: Invalid REST operation type:: %s', srestOperType)
        return ''

## -- PROCESS GET REPLY FROM NETCONF SERVER EXTRACT XML REPLY and send to HTTP framework --
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_editrpcreplytree
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function will process the edit-rpc reply
##-- Input           : tdoc --> Element tree instance generated by parsing xml file
##--                 
##-- Output          : json object represting OK or error response
##--
##-- Return          :
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_process_editrpcreplytree(tdoc, srestOperType, srpcreplystring):
    
    logger.debug('isdk_process_editrpcreplytree called with srestOperType: %s', srestOperType)

    for elt in tdoc.getiterator():
        if 'ok' == elt.tag or 'rpc-error' == elt.tag :
            sOutXml = etree.tostring(elt, pretty_print=True, encoding=None)
            sOutXml = sOutXml.strip()
            logger.debug('isdk_process_editrpcreplytree XML Reply sent to web frame work: %s', sOutXml)
            return sOutXml
    
    return ''

## -- PROCESS GET REPLY FROM NETCONF SERVER EXTRACT XML REPLY and send to HTTP framework --
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_getrpcreplytree
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function will process get rpc reply
##-- Input           : tdoc --> Element tree instance generated by parsing xml file
##--                   schemapath --> The rest api xpath for which get request is send
##--                   
##-- Output          :json-array (rpc reply converted in json format)
##--                  
##--
##-- Return          :json-array
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_process_getrpcreplytree(tdoc, schemapath, srpcreplystring):
    #logger.debug('isdk_process_getrpcreplytree xpath received in REST api: %s', schemapath)
    logger.debug('isdk_process_getrpcreplytree called with schemapath: %s', schemapath)
    
    ##-- discovery of path -- 
    ##-- discovery of path  --
    lXpath = schemapath.split('/')
    tdocContents = tdoc.getchildren()
    for elt in tdocContents:
        if 'data' == elt.tag:
            lChild = elt.getchildren()
            if len(lChild) > 0:
                sOutXml = etree.tostring(lChild[0], pretty_print=True, encoding=None)
                sOutXml = sOutXml.strip()
                logger.debug('isdk_process_getrpcreplytree XML Reply sent to web frame work: %s', sOutXml)
                lXpath = schemapath.split('/')
                lXpath.pop(0)
                return sOutXml
#                if 1 == len(lXpath):
#                    xml2xpath.isdk_process_rpcreply(sOutXml,lXpath)
#                return sOutXml           
            else:
                return ''
        elif 'rpc-error' == elt.tag:
            sOutXml = etree.tostring(elt, pretty_print=True, encoding=None)
            sOutXml = sOutXml.strip()
            logger.debug('isdk_process_getrpcreplytree XML Reply sent to web frame work: %s', sOutXml)
            return sOutXml
    return ''

## -- PROCESS GET REPLY FROM NETCONF SERVER EXTRACT XML REPLY and send to HTTP framework --
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_actionrpcreplytree
##-- Date Created    : 15-07-2013
##-- Author          :
##-- Description     : Function will process the edit-rpc reply
##-- Input           : tdoc --> Element tree instance generated by parsing xml file
##--                 
##-- Output          : json object represting OK or error response
##--
##-- Return          :
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_process_actionrpcreplytree(tdoc, srestOperType, srpcreplystring):
    
    logger.debug('isdk_process_actionrpcreplytree called with srestOperType: %s', srestOperType)

    for elt in tdoc.getiterator():
        if 'ok' == elt.tag or 'rpc-error' == elt.tag :
            sOutXml = etree.tostring(elt, pretty_print=True, encoding=None)
            sOutXml = sOutXml.strip()
            logger.debug('isdk_process_actionrpcreplytree XML Reply sent to web frame work: %s', sOutXml)
            return sOutXml
    
    return ''


##-------------------------------------------------------------------------------
##-- Func Name       : isdk_convert_rpc2restapi
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function converts received rpc-reply to rest-json format
##-- Input           : srpcreplystring --> RPC reply string received
##--                   schemapath --> xpath for which rpc request is send
##--                   srestOperType --> REST api operation type (POST, PUT, DELETE, GET)
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##------------------------------------------------------------------------------        
def isdk_convert_rpc2restapi(srpcreplystring, schemapath, srestOperType):
    
    sRpcRply = str(srpcreplystring)
    ##print(st)
    logger.debug('isdk_convert_rpc2restapi RPC Reply: %s', sRpcRply)
    tdoc = etree.fromstring(sRpcRply)
    
    logger.debug('isdk_convert_rpc2restapi xpath received in REST api: %s', schemapath)
    logger.debug('isdk_convert_rpc2restapi called with REST operation: %s', srestOperType)
    
    # - Based on REST api operation type call the corresponding handler
    if config.POST == srestOperType or config.PUT == srestOperType or config.DELETE == srestOperType:
        return isdk_process_editrpcreplytree(tdoc, srestOperType, sRpcRply)
    elif config.GET == srestOperType:
        return isdk_process_getrpcreplytree(tdoc, schemapath, sRpcRply)
    elif config.ACTION == srestOperType or config.COPYCONFIG == srestOperType or config.DELETECONFIG == srestOperType or srestOperType == config.KILLSESSION:
        return isdk_process_actionrpcreplytree(tdoc, schemapath, sRpcRply)
    else:
        return ''                
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_convert_appschema2eletree
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : For the given xpath open oper schema file of corresponding
##--                   application and convert to element tree format 
##-- Input           : schemapath --> xpath reeceived in REST api
##-- Output          : tdoc --> Element tree instance
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##------------------------------------------------------------------------------  
def isdk_convert_appschema2eletree(schemapath):
    logger.debug('isdk_convert_appschema2eletree: xpath received in REST API: %s', schemapath)
    lfilename = []
    lpath = schemapath.split('/')
    lfilename.append(lpath[1].upper())
    lfilename.append('oper.xml')
    sfilename = '_'.join(lfilename)
    spath = os.path.join(os.getcwd(), 'resource', sfilename)
    try:
        tdoc = etree.parse(spath)
    except IOError:
        logger.debug('isdk_convert_appschema2eletree Error: File does not appear to exist: %s', spath)
        return ''
    return tdoc
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_editrestapi
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function converts rest api to edit rpc request
##-- Input           : json_array --> JSON Array recevied from rest api call
##                    eg:
##                        [{ "keyId"      : "2000",
##                           "mode"       : "MD5",
##                           "keyVal"     : "password",
##                           "isReliable" : "true"
##                         }]
##--                   lxmlPath --> Python list of xpath genereated from xml schema file
##--                   schemapath --> xpath received from rest api.
##--                        eg: /ntp/ntpAuthKeyCfgs/ntpAuthKeyCfg
##--                   lrestApiPath --> Python list of xpath received from rest api call
##--                   srestopertype --> REST api type (POST, PUT, GET, DELETE)
##--                   
##-- Output          : Edit rpc request (from <config> node onwards)
##--                   eg:
##                      <config>
##                          <ntp xmlns="http://www.huawei.com/netconf/vrp" format-version="1.0" content-version="1.0">
##                            <ntpAuthKeyCfgs>
##                                <ntpAuthKeyCfg operation="create">
##                                    <keyId>2002</keyId>
##                                    <mode>MD5</mode>
##                                    <keyVal>password</keyVal>
##                                    <isReliable>true</isReliable>
##                                </ntpAuthKeyCfg>
##                           </ntpAuthKeyCfgs>   
##                         </ntp>
##                      </config>
##--
##-- Return          :
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_process_editrestapi(dInputBody, lrestApiPath, srestopertype):

    uiCount = 0
 
    configElement = etree.Element('config', nsmap={None : config.BASE_CAP_NAMESPACE})
    ##---- processing for the ls vs------
    
    sRollback = ''
#     if lrestApiPath[len(lrestApiPath)-1] == 'if-error-continue' or lrestApiPath[len(lrestApiPath)-1] == 'if-error-rollback':
    if lrestApiPath[len(lrestApiPath)-1] == 'if-error%3Dcontinue' or lrestApiPath[len(lrestApiPath)-1] == 'if-error%3Drollback' :
        ##--if-error=continue  and if-error=rollback
        ##--for the expected response i:e in xml/json
        sFlag =  lrestApiPath.pop()
        if 'if-error%3Dcontinue' == sFlag:
            sRollback = 'continue-on-error'
        elif 'if-error%3Drollback' == sFlag:
            sRollback = 'rollback-on-error'
    
    ui = 0 
    sLsorVs = ''
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=') !=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath.insert(ui, lret[0])
                sLsorVs = lret[1]
    
    if sLsorVs == '':
        logger.debug('isdk_process_getrestapi: does not contain ls or vs info : %s',lrestApiPath)
    ##---- end of the processing ls vs-----
    #-- based on rest api determine edit-config operation
    if config.POST == srestopertype:
        editOperName = config.EDIT_CONFIG_CREATE_OPERATION
    elif config.PUT == srestopertype:
        editOperName = config.EDIT_CONFIG_MERGE_OPERATION
    elif config.DELETE == srestopertype:
        editOperName = config.EDIT_CONFIG_DELETE_OPERATION
    
    isIpBodyJsonType = False
    isIpBodyXMLType = False 
    for k,v in dInputBody.items():
        if k == config.ISDK_JSON_IP_BODY:
            if v != None:
                isIpBodyJsonType = True
        elif k == config.ISDK_XML_IP_BODY:
            if v != None:
                isIpBodyXMLType = True
    
    if isIpBodyJsonType == True and isIpBodyXMLType == True:
        logger.debug('isdk_process_editrestapi: Both json (%s) and xml input is present (%s)', dInputBody[config.ISDK_JSON_IP_BODY], dInputBody[config.ISDK_XML_IP_BODY])
        return ''
    
    parentNode = configElement
    #-- based on received xpath from rest api, travrse the xpath generated from cooreponding application xml schema file
    #-- eg: /ntp/ntpAuthKeyCfgs/ntpAuthKeyCfg
    #-- here ntp --> sevrice_element; ntpAuthKeyCfgs --> table-container-element; ntpAuthKeyCfg->table-instance-element
    #-- generate the xml nodes based on this heirarcy
    # add attribute infor only for service node i.e first part of xpath eg (/ntp/ntpAuthKeyCfgs/ntpAuthKeyCfg here ntp is service node)
    # all other node has attribute empty as per edit-config request
    #-- if parent has selection attribute create a node for the same
    #-- eg: REST api--> '/netconf/authorization/ruleLists/ruleList?ruleListName=manage-tg/rules/rule'
    #-- ##    json_array = [{
    #    "ruleName": "rule1",
    #    "ruleType": "operationRule",
    #    "rpcOperName": "unlock",
    #    "action": "deny"
    #   }]
    #
    #-- the <config> elements for above API will be
    #   <config>
    #      <netconf xmlns="http://www.huawei.com/netconf/vrp" format-version="1.0" content-version="1.0">
    #       <authorization>
    #          <ruleLists>
    #              <ruleList>
    #                 <ruleListName>tg2<ruleListName> ------------> selection attribute for parent
    #              <ruleList>
    #              <rules>
    #                   <rule operation="create">
    #                       <ruleName>rule1</ruleName>
    #                       <ruleType>operationRule</ruleType>
    #                       <rpcOperName>unlock</rpcOperName>
    #                       <action>deny</action>
    #                   </rule>
    #               <rules>
    #           </ruleLists>
    #        </authorization>
    #      </<netconf>
    #   </config>             
    #
    for uiCount in range(len(lrestApiPath)):
        lelement = lrestApiPath[uiCount].split('?')
        if len(lelement) == 2:
            #query string is present 
            if 0 == uiCount:
                newNode = etree.SubElement(parentNode, lelement[0], attrib={'content-version' : config.CONTENT_VERSION, 'format-version': config.FORMAT_VERSION}, 
                                                                             nsmap={None : config.NETCONF_NAMESPACE})
            elif uiCount == (len(lrestApiPath) - 1):
                newNode = etree.SubElement(parentNode, lelement[0], operation=editOperName)                
            else:
                newNode = etree.SubElement(parentNode, lelement[0])
                                
            lqueryElem = lelement[1].split('&')
            ##print(lqueryElem)
            for liter in lqueryElem:
                litems = liter.split('=')
                tableInstNode = etree.SubElement(newNode, litems[0])
                tableInstNode.text = urllib.unquote(litems[1])        
                           
        elif len(lelement) == 1:
            #query string not present
            if 0 == uiCount:
                # for service node (i.e first part of xpath
                newNode = etree.SubElement(parentNode, lrestApiPath[uiCount], attrib={'content-version' : config.CONTENT_VERSION, 'format-version': config.FORMAT_VERSION}, 
                                                                                nsmap={None : config.NETCONF_NAMESPACE})
            elif uiCount == (len(lrestApiPath) - 1):
                # for last part of xpath (i.e. table instance node)
                newNode = etree.SubElement(parentNode, lrestApiPath[uiCount], operation=editOperName)
            else:
                # for intermidaite node
                newNode = etree.SubElement(parentNode, lrestApiPath[uiCount])
        else:
            logger.debug('isdk_process_editrestapi: 1.Invalid xpath element received in rest-api: %s',lrestApiPath[uiCount])
            return ''
        
        parentNode = newNode
       
        if uiCount == (len(lrestApiPath) - 1):
            if isIpBodyJsonType == True:
                json_array = dInputBody[config.ISDK_JSON_IP_BODY]
                if len(json_array) > 0:
                    #-- based on contents of json-array create <cfg-data-element> node with its value and attach it to parent element
                    for lcontent in json_array:
                        json_obj = lcontent
                        for key,value in json_obj.items():
                            cfgElement = etree.SubElement(parentNode, key)
                            cfgElement.text = value
            
            elif isIpBodyXMLType == True:
                sXmlInput = dInputBody[config.ISDK_XML_IP_BODY]
                #print "input body->",sXmlInput
                if sXmlInput != '':
                    sXmlInput = '<dummyRoot>' + sXmlInput + '</dummyRoot>'
                    subTreeRoot = etree.fromstring(sXmlInput)
                    #subTreeRoot = subTreedoc.getroot()
                    childElem = subTreeRoot.getchildren()
                    for item in childElem:
                        parentNode.append(item)

    lretEditRestApi = [(etree.tostring(configElement, pretty_print=True)),sLsorVs,sRollback]
    return lretEditRestApi

##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_getrestapi
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function converts REST api to <filter> node in get request
##-- Input           : dInputBody --> input-body, for get api this is nil
##--                   lxmlPath --> Python list of xpath genereated from xml schema file
##--                   schemapath --> xpath received from rest api.
##--                        eg: /netconf/authorization/ruleLists/ruleList
##--                   lrestApiPath --> Python list of xpath received from rest api call
##--                   
##-- Output          : Edit rpc request (from <config> node onwards)
##--                   eg:
##                      <filter type="subtree">
##                          <netconf format-version="1.0" content-version="1.0" xmlns="http://www.huawei.com/netconf/vrp">
##                              <authorization>
##                                  <ruleLists>
##                                      <ruleList>
##                                          <ruleListName>tg2</ruleListName>
##                                      </ruleList>
##                                  </ruleLists>
##                              <authorization>
##                          </netconf>
##                      </filter>
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_process_getrestapi(dInputBody, lrestApiPath):
    
    #===========================================================================
    #-- create <filter> node
    #-- if parent has one selection attribute create a node for the same
    #-- eg: REST api--> GET /netconf/authorization/ruleLists/<ruleList>?ruleListName='tg2'/rules/rule
    #-- dInputBody = {}
    #
    #-- the <filter> elements for above API will be
    #   <filter type="subtree">
    #      <netconf xmlns="http://www.huawei.com/netconf/vrp" format-version="1.0" content-version="1.0">
    #       <authorization>
    #          <ruleLists>
    #              <ruleList>
    #                 <ruleListName>tg2<ruleListName> ------------> selection attribute for parent
    #              <ruleList>
    #              <rules>
    #                   <rule>
    #                       <ruleName>rule1</ruleName>
    #                       <ruleType>operationRule</ruleType>
    #                   </rule>
    #               <rules>
    #           </ruleLists>
    #        </authorization>
    #      </<netconf>
    #   </filter>             
    #
    # if parent node has multiple  selection attribute in rest api create that many selection nodes in parent
    #-- eg: REST api--> GET /netconf/authorization/ruleLists/<ruleList>?ruleListName='tg2'&userGroup='ug1'/rules/rule
    #-- Partial encoding will be as below
    #--              <ruleList>
    #--                 <ruleListName>tg2<ruleListName> ------------> selection attribute for parent
    #--                 <userGroup>ug1<userGroup> ------------> selection attribute for parent
    #--             <ruleList>
     
    
    ##---- processing for the ls vs------
    sLsorVs = ''    
    ui = 0 
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=')!=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath[ui] = lret[0]
                sLsorVs = lret[1]
                
    
    if sLsorVs == '':
        logger.debug('isdk_process_getrestapi: does not contain ls or vs info : %s',lrestApiPath)
    ## process ther lrestapi path
    drestapi,lxpathkey = isdk_process_lpath2dict(lrestApiPath)
    filter = isdk_process_dicttofiltertree(drestapi,lxpathkey)
    ##---- end of the processing ls vs-----
    lretGetRestApi = [filter,sLsorVs]
    return lretGetRestApi    
    
##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_getconfigrestapi
##-- Date Created    : 30-08-2013
##-- Author          : Azam Khan
##-- Description     : Function converts REST api to <filter> node in get request
##-- Input           : dInputBody --> input-body, for get api this is nil
##--                   lxmlPath --> Python list of xpath genereated from xml schema file
##--                   schemapath --> xpath received from rest api.
##--                        eg: /netconf/authorization/ruleLists/ruleList
##--                   lrestApiPath --> Python list of xpath received from rest api call
##--                   
##-- Output          : Edit rpc request (from <config> node onwards)
##--                   eg:
##                      <filter type="subtree">
##                          <netconf format-version="1.0" content-version="1.0" xmlns="http://www.huawei.com/netconf/vrp">
##                              <authorization>
##                                  <ruleLists>
##                                      <ruleList>
##                                          <ruleListName>tg2</ruleListName>
##                                      </ruleList>
##                                  </ruleLists>
##                              <authorization>
##                          </netconf>
##                      </filter>
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##------------------------------------------------------------------------------
def isdk_process_getconfigrestapi(dInputBody, lrestApiPath):
    
    uiCount = 0
    #-- create <filter> node
    filterElement = etree.Element('filter', type='subtree',nsmap={None : config.BASE_CAP_NAMESPACE})
    #sheet = etree.ElementTree(filterElement)

    #-- if parent has one selection attribute create a node for the same
    #-- eg: REST api--> GET /netconf/authorization/ruleLists/<ruleList>?ruleListName='tg2'/rules/rule
    #-- dInputBody = {}
    #
    #-- the <filter> elements for above API will be
           
    #
    # if parent node has multiple  selection attribute in rest api create that many selection nodes in parent
    #-- eg: REST api--> GET /netconf/authorization/ruleLists/<ruleList>?ruleListName='tg2'&userGroup='ug1'/rules/rule
    #-- Partial encoding will be as below
    #--              <ruleList>
    #--                 <ruleListName>tg2<ruleListName> ------------> selection attribute for parent
    #--                 <userGroup>ug1<userGroup> ------------> selection attribute for parent
    #--             <ruleList>
    
    parentNode = filterElement
    ##---- processing for the ls vs------
    
    ui = 0 
    sLsorVs = ''
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=')!=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath[ui] = lret[0]
                sLsorVs = lret[1]
    
    if sLsorVs == '':
        logger.debug('isdk_process_getrestapi: does not contain ls or vs info : %s',lrestApiPath)
        
    ##---- end of the processing ls vs-----
                     
    for uiCount in range(len(lrestApiPath)):
        lelement = lrestApiPath[uiCount].split('?')
        if len(lelement) == 2:
            #query string is present 
            if 0 == uiCount:
                # for service node (i.e first part of xpath
                newNode = etree.SubElement(parentNode, lelement[0], attrib={'content-version' : config.CONTENT_VERSION, 'format-version': config.FORMAT_VERSION}, 
                                                                             nsmap={None : config.NETCONF_NAMESPACE})
            else:
                # for irest of the nodes
                newNode = etree.SubElement(parentNode, lelement[0])
                                
            lqueryElem = lelement[1].split('&')
            ##print(lqueryElem)
            for liter in lqueryElem:
                litems = liter.split('=')
                tableInstNode = etree.SubElement(newNode, litems[0])
                tableInstNode.text = urllib.unquote(litems[1])        
                           
        elif len(lelement) == 1:
            #query string not present
            if 0 == uiCount:
                # for service node (i.e first part of xpath
                newNode = etree.SubElement(parentNode, lrestApiPath[uiCount], attrib={'content-version' : config.CONTENT_VERSION, 'format-version': config.FORMAT_VERSION}, 
                                                                                nsmap={None : config.NETCONF_NAMESPACE})
            else:
                # for irest of the nodes
                newNode = etree.SubElement(parentNode, lrestApiPath[uiCount])
        else:
            logger.debug('isdk_process_getrestapi: 1.Invalid xpath element received in rest-api: %s',lrestApiPath[uiCount])
            return ''
        
        parentNode = newNode
        
    lretGetRestApi = [(etree.tostring(filterElement, pretty_print=True)),sLsorVs]
    return lretGetRestApi    
    

##-------------------------------------------------------------------------------
##-- Func Name       : isdk_process_actionrestapi
##-- Date Created    : 15-07-2013
##-- Author          : AZAM KHAN 84012589
##-- Description     : Function converts rest api to execute-action rpc request
##-- Input           : JSON array
##                    eg:
##                         [{"serverIpv4Address": "10.18.27.67"},
##                          {"commandType": "put"},
##                          {"userName": "netconf"},
##                          {"password": "netconf123"},
##                          {"localFileName": "cfcard:/nca_ftpc.cfg"},
##                          {"remoteFileName": "/home/nca_ftpc.cfg"}]
##                   
##--                       
##--                   lrestApiPath --> Python list of xpath received from rest api call
##--                     eg: /ftpc/ftpcTransferFiles/ftpcTransferFile
##--                   srestopertype --> ACTION REST api type 
##--                   
##-- Output          : ACTION rpc request (from <xxx> application node onwards)
##--                   eg:
##                         <ftpc xmlns="http://www.huawei.com/netconf/vrp" format-version="1.0" content-version="1.0">
##                           <ftpcTransferFiles>
##                             <ftpcTransferFile>
##                               <serverIpv4Address>10.18.27.67</serverIpv4Address>
##                               <commandType>put</commandType>
##                               <userName>netconf</userName>
##                               <password>netconf123</password>
##                               <localFileName>cfcard:/nca_ftpc.cfg</localFileName>
##                               <remoteFileName>/home/nca_ftpc.cfg</remoteFileName>
##                             </ftpcTransferFile>
##                           </ftpcTransferFiles>
##                         </ftpc>                    
##                    
##--
##-- Return          : ACTION rpc request (from <xxx> application node onwards)
##--
##-- Caution         : 
##------------------------------------------------------------------------------
def isdk_process_actionrestapi(dInputBody, lrestApiPath):

    uiCount = 0
    #-- create xml <config> node
    appElement = etree.Element(lrestApiPath[0], attrib={'content-version' : config.CONTENT_VERSION, 'format-version': config.FORMAT_VERSION}, 
                                                                             nsmap={None : config.NETCONF_NAMESPACE,'nc': config.BASE_CAP_NAMESPACE})
    lrestApiPath.pop(0)
    ##-- for getting info type of body --
    isIpBodyJsonType = False
    isIpBodyXMLType = False 
    for k,v in dInputBody.items():
        if k == config.ISDK_JSON_IP_BODY:
            if v != None:
                isIpBodyJsonType = True
        elif k == config.ISDK_XML_IP_BODY:
            if v != None:
                isIpBodyXMLType = True
    
    if isIpBodyJsonType == True and isIpBodyXMLType == True:
        logger.debug('isdk_process_actionrestapi: Both json (%s) and xml input is present (%s)', dInputBody[config.ISDK_JSON_IP_BODY], dInputBody[config.ISDK_XML_IP_BODY])
        return ''
    
    parentNode = appElement
    ##---- processing for the ls vs------
    ui = 0 
    sLsorVs = ''
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=')!=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath[ui] = lret[0]
                sLsorVs = lret[1]
    
    if sLsorVs == '':
        logger.debug('isdk_process_actionrestapi: does not contain ls or vs info : %s',lrestApiPath)
    ##---- end of the processing ls vs-----

    newNode = None
    ##  --- need to change this also  --
    #-- based on received xpath from rest api, travrse the xpath generated from cooreponding application xml schema file
    #-- eg: /ftpc/ftpcTransferFiles/ftpcTransferFile
    #-- here ftpc --> sevrice_element; ftpcTransferFiles --> table-container-element; ftpcTransferFile->table-instance-element
    #-- generate the xml nodes based on this heirarcy
    # add attribute infor only for service node i.e first part of xpath eg (/ftpc/ftpcTransferFiles/ftpcTransferFile here ntp is service node)
    # all other node has attribute empty as per action request request
    #-- if parent has selection attribute create a node for the same
    #-- eg: REST api--> '/ftpc/ftpcTransferFiles/ftpcTransferFile'
    #-- ##    json_array = [{"serverIpv4Address": "10.18.27.67"},
    #                          {"commandType": "put"},
    #                          {"userName": "netconf"},
    #                          {"password": "netconf123"},
    #                          {"localFileName": "cfcard:/nca_ftpc.cfg"},
    #                          {"remoteFileName": "/home/nca_ftpc.cfg"}]
    #                   
    #
    #-- the <xxx> app elements for above API will be
    ##               <ftpc xmlns="http://www.huawei.com/netconf/vrp" format-version="1.0" content-version="1.0">
    ##                <ftpcTransferFiles>
    ##                 <ftpcTransferFile>
    ##                  <serverIpv4Address>10.18.27.67</serverIpv4Address>
    ##                   <commandType>put</commandType>
    ##                   <userName>netconf</userName>
    ##                   <password>netconf123</password>
    ##                   <localFileName>cfcard:/nca_ftpc.cfg</localFileName>
    ##                   <remoteFileName>/home/nca_ftpc.cfg</remoteFileName>
    ##                  </ftpcTransferFile>
    ##                 </ftpcTransferFiles>
    ##                </ftpc>                    
    for uiCount in range(len(lrestApiPath)):
        lelement = lrestApiPath[uiCount].split('?')
        if len(lelement) == 2:
            #query string is present 
            if 0 == uiCount:
                newNode = etree.SubElement(parentNode,lrestApiPath[uiCount])
            elif uiCount == (len(lrestApiPath) - 1):
                newNode = etree.SubElement(parentNode,lelement[0])                
            else:
                newNode = etree.SubElement(parentNode,lelement[0])
                                
            lqueryElem = lelement[1].split('&')
            ##print(lqueryElem)
            for liter in lqueryElem:
                litems = liter.split('=')
                tableInstNode = etree.SubElement(newNode, litems[0])
                tableInstNode.text = urllib.unquote(litems[1])        
                           
        elif len(lelement) == 1:
            #query string not present
            if uiCount == (len(lrestApiPath) - 1):
                # for last part of xpath (i.e. table instance node)
                newNode = etree.SubElement(parentNode,lrestApiPath[uiCount])
            else:
                # for intermidaite node
                newNode = etree.SubElement(parentNode,lrestApiPath[uiCount])
        else:
            logger.debug('isdk_process_actionrestapi: 1.Invalid xpath element received in rest-api: %s',lrestApiPath[uiCount])
            return ''
        
        parentNode = newNode
        if uiCount == (len(lrestApiPath) - 1):
            ## for json body reading
            if isIpBodyJsonType == True:
                json_array = dInputBody[config.ISDK_JSON_IP_BODY]
                if len(json_array) > 0:
                    #-- based on contents of json-array create <cfg-data-element> node with its value and attach it to parent element
                    for lcontent in json_array:
                        json_obj = lcontent
                        for key,value in json_obj.items():
                            cfgElement = etree.SubElement(parentNode, key)
                            cfgElement.text = value
            ##- for xml body reading
            elif isIpBodyXMLType == True:
                sXmlInput = dInputBody[config.ISDK_XML_IP_BODY]
                #print "input body->",sXmlInput
                if sXmlInput != '':
                    sXmlInput = '<dummyRoot>' + sXmlInput + '</dummyRoot>'
                    subTreeRoot = etree.fromstring(sXmlInput)
                    #subTreeRoot = subTreedoc.getroot()
                    childElem = subTreeRoot.getchildren()
                    for item in childElem:
                        parentNode.append(item)
    
    srpcaction = etree.tostring(appElement, pretty_print=True)
    logger.debug('isdk_process_actionrestapi: Action RPC : %s',srpcaction)
    lretActionRestApi = [(srpcaction),sLsorVs]
    return lretActionRestApi
    
##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_process_copyconfigrestapi
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function call handler based on rest operation to convert rest api to rpc request
##-- Input           : dInputBody --> Input body it can be either in json or xml format
##--                 : schemapath --> xpath received in REST api
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------
def isdk_process_copyconfigrestapi(dInputBody, lrestApiPath):
    ##--input body type
    isIpBodyJsonType = False
    isIpBodyXMLType = False 
    for k,v in dInputBody.items():
        if k == config.ISDK_JSON_IP_BODY:
            if v != None:
                isIpBodyJsonType = True
        elif k == config.ISDK_XML_IP_BODY:
            if v != None:
                isIpBodyXMLType = True
    
    if isIpBodyJsonType == True and isIpBodyXMLType == True:
        logger.debug('isdk_process_copyconfigrestapi: Both json (%s) and xml input is present (%s)', dInputBody[config.ISDK_JSON_IP_BODY], dInputBody[config.ISDK_XML_IP_BODY])
        return ''
    
    ##---- processing for the ls vs------
    ui = 0 
    sLsorVs = ''
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=')!=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath[ui] = lret[0]
                sLsorVs = lret[1]
    
    if sLsorVs == '':
        logger.debug('isdk_process_copyconfigrestapi: does not contain ls or vs info : %s',lrestApiPath)
    ##---- end of the processing ls vs-----

    targetNode = None
    sourceNode = None
    sxpath = '/'.join(lrestApiPath)
    if sxpath.find('target')!=-1 and sxpath.find('source')!=-1:
        #print
        sinput = None
        if sxpath.find('url')!=-1:
            djson = dInputBody['json_array']
            sinput = djson[0].get('url')
        sInput = sxpath.split('?').pop()
#         sInput = lxpath.pop()
        if sInput.find('&')!=-1:
            ## target=startup&source=running
            lInput = sInput.split('&')
            ##['target=startup','source=running']
            for item in lInput:
                if item.find('target')!=-1:
                    sin = item.split('=').pop()
                    if 'url' == sin:
                        targetNode = str(sinput)
                        continue
                    targetNode = sin
                elif item.find('source')!=-1:
                    sin = item.split('=').pop()
                    if 'url' == sin:
                        sourceNode = sinput
                        continue
                    sourceNode = sin
        else:## ?target=startup,source=running
            lInput = sInput.split(',')
            ##['target=startup','source=running']
            for item in lInput:
                if item.find('target')!=-1:
                    sin = item.split('=').pop()
                    if 'url' == sin:
                        targetNode = sinput
                        continue
                    targetNode = sin
                elif item.find('source')!=-1:
                    sin = item.split('=').pop()
                    if 'url' == sin:
                        sourceNode = sinput
                        continue
                    sourceNode = sin
    else:##input body is present
        if isIpBodyJsonType == True:
            ljson = dInputBody['json_array']
            for ditem in ljson:##for list
                {}.itervalues()
                for key,value in ditem.items():
                    if 'target' == key:
                        if type(value)is dict:
                            targetNode = value["url"]
                        else:
                            targetNode = value
                    elif 'source' == key:
                        if type(value)is dict:
                            sourceNode = value["url"]
                        else:
                            sourceNode = value
             
# #             targetNode = djson[0].get('target')
# #             sourceNode = djson[1].get('source')
        elif isIpBodyXMLType == True:
            sXmlInput = dInputBody['xml_input']
            sXmlInput = '<dummyRoot>' + sXmlInput + '</dummyRoot>'
            treeRoot = etree.fromstring(sXmlInput)
            ltreeRootChilds = treeRoot.getchildren()
            
            #===================================================================
            # <target>
            #     <running/>
            # </target>
            # <source>
            #     <url>huawei.cfg</url>
            # </source>
            # 
            # ## no child node
            # <target>
            #     <running/>
            # </target>
            # <source>
            #     <startup/>
            # </source>
            #===================================================================
            for item in ltreeRootChilds:
                if 'target' == item.tag:
                    if item[0].text != None:
                        targetNode = item[0].text
                    else:
                        targetNode = item[0].tag
                elif 'source' == item.tag:
                    if item[0].text != None:
                        sourceNode = item[0].text
                    else:
                        sourceNode = item[0].tag
    
    logger.debug('isdk_process_copyconfigrestapi:target = %s , source = %s ',targetNode,sourceNode)
    lretActionRestApi = [str(targetNode),sourceNode,sLsorVs]
    return lretActionRestApi

##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_process_deleteconfigrestapi
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function call handler based on rest operation to convert rest api to rpc request
##-- Input           : dInputBody --> Input body it can be either in json or xml format
##--                 : schemapath --> xpath received in REST api
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------
def isdk_process_deleteconfigrestapi(dInputBody, lrestApiPath):
    ##--input body type
    isIpBodyJsonType = False
    isIpBodyXMLType = False 
    for k,v in dInputBody.items():
        if k == config.ISDK_JSON_IP_BODY:
            if v != None:
                isIpBodyJsonType = True
        elif k == config.ISDK_XML_IP_BODY:
            if v != None:
                isIpBodyXMLType = True
    
    if isIpBodyJsonType == True and isIpBodyXMLType == True:
        logger.debug('isdk_process_deleteconfigrestapi: Both json (%s) and xml input is present (%s)', dInputBody[config.ISDK_JSON_IP_BODY], dInputBody[config.ISDK_XML_IP_BODY])
        return ''
    
    ##---- processing for the ls vs------
    ui = 0 
    sLsorVs = ''
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=')!=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath[ui] = lret[0]
                sLsorVs = lret[1]
    
    if sLsorVs == '':
        logger.debug('isdk_process_deleteconfigrestapi: does not contain ls or vs info : %s',lrestApiPath)
    ##---- end of the processing ls vs-----

    targetNode = None
    sxpath = '/'.join(lrestApiPath)
    if sxpath.find('target')!=-1:
        sinput = ''
        if sxpath.find('url')!=-1:
            djson = dInputBody['json_array']
            sinput = djson[0].get('url')
        sInput = sxpath.split('?').pop()
        if sxpath.find('target')!=-1:
            if sInput.split('=').pop().find('url')!=-1:
                targetNode = str(sinput)
            else:
                targetNode = sInput.split('=').pop()
    else:##input body is present
        if isIpBodyJsonType == True:
            ljson = dInputBody['json_array']
            ## process the json array for the both simple and complex element
            djson = ljson.pop()
            for key,value in djson.items():
                if type(value)is dict:
                    targetNode = value["url"]
                else:
                    targetNode = value
#             targetNode = djson[0].get('target')
        elif isIpBodyXMLType == True:
            sXmlInput = dInputBody['xml_input']
            sXmlInput = '<dummyRoot>' + sXmlInput + '</dummyRoot>'
            treeRoot = etree.fromstring(sXmlInput)
            ltreeRootChilds = treeRoot.getchildren()
            for item in ltreeRootChilds:
                if 'target' == item.tag:
                    if item[0].text != None:
                        targetNode = item[0].text
                    else:
                        targetNode = item[0].tag

    logger.debug('isdk_process_deleteconfigrestapi:target = %s ',targetNode)
    lretActionRestApi = [targetNode,sLsorVs]
    return lretActionRestApi

##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_process_killsessionrestapi
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function call handler based on rest operation to convert rest api to rpc request
##-- Input           : dInputBody --> Input body it can be either in json or xml format
##--                 : schemapath --> xpath received in REST api
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------

def isdk_process_killsessionrestapi(dInputBody, lrestApiPath):
    ##--input body type
    isIpBodyJsonType = False
    isIpBodyXMLType = False 
    for k,v in dInputBody.items():
        if k == config.ISDK_JSON_IP_BODY:
            if v != None:
                isIpBodyJsonType = True
        elif k == config.ISDK_XML_IP_BODY:
            if v != None:
                isIpBodyXMLType = True
    
    if isIpBodyJsonType == True and isIpBodyXMLType == True:
        logger.debug('isdk_process_killsessionrestapi: Both json (%s) and xml input is present (%s)', dInputBody[config.ISDK_JSON_IP_BODY], dInputBody[config.ISDK_XML_IP_BODY])
        return ''
    
    ##---- processing for the ls vs------
    ui = 0 
    sLsorVs = ''
    for ui in range(len(lrestApiPath)):
        squery = lrestApiPath[ui]
        
        if squery.find('ls=')!=-1 or squery.find('vs=')!=-1:
            lret = isdk_process_querystring(squery)
            if isinstance(lret,list):
                lrestApiPath[ui] = lret[0]
                sLsorVs = lret[1]
    
    if sLsorVs == '':
        logger.debug('isdk_process_killsessionrestapi: does not contain ls or vs info : %s',lrestApiPath)
    ##---- end of the processing ls vs-----

    sesIdNode = None
    sxpath = '/'.join(lrestApiPath)
    if sxpath.find('session-id')!=-1:
        lxpath = sxpath.split('=')
        sesIdNode = lxpath.pop()
    else:    
        if isIpBodyJsonType == True:
            djson = dInputBody['json_array']
            sesIdNode = djson[0].get('session-id')
        elif isIpBodyXMLType == True:
            sXmlInput = dInputBody['xml_input']
            sXmlInput = '<dummyRoot>' + sXmlInput + '</dummyRoot>'
            treeRoot = etree.fromstring(sXmlInput)
            ltreeRootChilds = treeRoot.getchildren()
            for item in ltreeRootChilds:
                if 'session-id' == item.tag:
                    sesIdNode = item[0].tag
    
    logger.debug(' isdk_process_killsessionrestapi: Session ID : %s ',sesIdNode)
    lretActionRestApi = [sesIdNode,sLsorVs]
    return lretActionRestApi


##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_convert_restapi2rpc
##-- Date Created    : 04-03-2013
##-- Author          :
##-- Description     : Function call handler based on rest operation to convert rest api to rpc request
##-- Input           : dInputBody --> Input body it can be either in json or xml format
##--                 : schemapath --> xpath received in REST api
##-- Output          :
##--
##-- Return          :OK/ERR
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------
def isdk_convert_restapi2rpc(dInputBody, schemapath, srestopertype):

    #-- based on REST api received open the corresponding application xml schema oper file
    #-- eg: POST /ntp/ntpAuthKeyCfgs/ntpAuthKeyCfg
    #-- since servie-node is of type "ntp", read ntp_oper.xml and convert to element tree instance 

    logger.debug('isdk_convert_restapi2rpc: XPATH:%s REST operation: %s', schemapath, srestopertype)
    lrestApiPath = schemapath.split('/')
    lrestApiPath.pop(0)                  ## remove device id element at the start of list
    ##print(lpath)
    logger.debug('isdk_convert_restapi2rpc: REST xpath received is: %s', lrestApiPath)
    if len(lrestApiPath) == 0:
        return []

    #-- Based on rest operation call corresponding handler    
    if config.POST == srestopertype or config.PUT == srestopertype or config.DELETE == srestopertype :
        return isdk_process_editrestapi(dInputBody, lrestApiPath, srestopertype)
    elif config.GET == srestopertype:
        return isdk_process_getrestapi(dInputBody, lrestApiPath)
    elif config.ACTION == srestopertype:
        return isdk_process_actionrestapi(dInputBody,lrestApiPath)
    elif config.GETCONFIG == srestopertype:
        return isdk_process_getconfigrestapi(dInputBody,lrestApiPath)
    elif config.COPYCONFIG == srestopertype:
        return isdk_process_copyconfigrestapi(dInputBody,lrestApiPath)
    elif config.DELETECONFIG == srestopertype:
        return isdk_process_deleteconfigrestapi(dInputBody,lrestApiPath)
    elif config.KILLSESSION == srestopertype:
        return isdk_process_killsessionrestapi(dInputBody,lrestApiPath)
    else:
        logger.debug('isdk_convert_restapi2rpc : Invalid REST operation received: %s', srestopertype)  
        return ''
    
    return ''
##
   
##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_process_querystring
##-- Date Created    : 09-07-2013
##-- Author          :
##-- Description     : Function call is query string peocessing for hwcontext element
##-- Input           : squerystring --> contains query string
##--                    eg : aclGroup?aclNumOrName=2000,aclMatchOrder=Config,aclStep=5,ls=x,vs=y
##-- Output          : NONE
##--
##-- Return          : list containg query string and hwcontext info
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------
def isdk_process_querystring(squerystring):
    
    #===========================================================================
    ## squerystring = 'aclGroup?aclNumOrName=2000,aclMatchOrder=Config,aclStep=5,ls=x,vs=y'
    ## squerystring = 'aclGroup?aclNumOrName=2000,aclMatchOrder=Config,aclStep=5,ls=x'
    ## squerystring = 'aclGroup?aclNumOrName=2000,vs=x'
    ## squerystring = 'aclGroup?ls=x,vs=y'
    ## squerystring = 'aclGroup?ls=x'
    ## squerystring = 'aclGroup?vs=y'
    #===========================================================================

    llsvs =[]
    lelmnt = []
    lret = []
    ltemp = squerystring.split('?')
    if len(ltemp) == 2:
        lelmnt = ltemp[1].split(',')
        for  k in reversed(lelmnt):
            if k.find('&')!=-1 and (k.find('ls=') != -1 or k.find('vs=') != -1):
                llsvs.extend(k.split('&'))
                lelmnt.remove(k)
            elif k.find('ls=') != -1 or k.find('vs=') != -1 :
                llsvs.append(k)
#                 lelmnt.pop()## this is wrong assuption
                lelmnt.remove(k)
    else:
        return ''

    if len(lelmnt) != 0:
        ltemp[1] = ','.join(lelmnt)
        lret.append('?'.join(ltemp))
    else:
        lret.append(ltemp[0])
    lret.append(','.join(reversed(llsvs)))

    return lret
    

##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_process_lpath2dict
##-- Date Created    : 27-01-2014
##-- Author          :
##-- Description     : Function call is query string peocessing for hwcontext element
##-- Input           : squerystring --> contains query string
##--                    eg : aclGroup?aclNumOrName=2000,aclMatchOrder=Config,aclStep=5,ls=x,vs=y
##-- Output          : NONE
##--
##-- Return          : list containg query string and hwcontext info
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------
def isdk_process_lpath2dict (lrestApiPath):
    
    ddic = {}
    lkey =[]
    pelt = ''
    ucnt = 0 
    for ucnt in range(len(lrestApiPath)):
        elt = lrestApiPath[ucnt]
        if elt.find('?') != -1 :
            #for the children processing
            lelt = elt.split('?')
            ##['interface', 'ifName,ifAdminStatus&ifControlFlap', 'ifCtrlFlapEnbl']
            ui= 0 
            for ui in range(len(lelt)):
                if 0 == ui:
                    ddic[pelt] = lelt[ui]
                    pelt = lelt[ui]
                    ddic[pelt]=None
                    lkey.append(pelt)
                elif lelt[ui].find(',')!=-1 or lelt[ui].find('&')!=-1 or lelt[ui].find('=')!=-1:
                    celt = lelt[ui]
                    ldelt = []
                    lcelt = celt.split(',')
                    for item in lcelt:
                        dcfield ={}
                        if item.find('=')!=-1:
                            lfield = item.split('=')
                            dcfield[lfield[0]]=urllib.unquote(lfield[1])
                            ldelt.append(dcfield)
                        elif item.find('&')!=-1:
                            #
                            lchelt = item.split('&')
                            telt = lchelt[0]
                            if telt.find('=')!=-1:
                                lfield = item.split('=')
                                dcfield[lfield[0]]=urllib.unquote(lfield[1])
                                ldelt.append(dcfield)
                            else:
                                dcfield[telt]=None
                                ldelt.append(dcfield)
                            ##for child elemnt found at & level
                            dcfield = {}
                            telt = lchelt[1]
                            dcfield[telt]=None
                            ldelt.append(dcfield)
                            ddic[pelt]=ldelt
                            pelt =telt
                            lkey.append(pelt)
                        else :##for attribute with None value
                            dcfield[item]=None
                            ldelt.append(dcfield)
                    ddic[pelt] = ldelt
                else:
                    ddic[pelt] = [{lelt[ui]:None}]
        else:
            if pelt == '':
                ddic [elt] = None
                pelt = elt
                lkey.append(pelt)
            else:
                ddic [pelt] = elt
                ddic[elt]=None
                pelt = elt
                lkey.append(pelt)
                
        ucnt += 1
    return ddic,lkey
    

##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_process_dicttofiltertree
##-- Date Created    : 28-01-2014
##-- Author          :
##-- Description     : Function call is query string peocessing for hwcontext element
##-- Input           : squerystring --> contains query string
##--                    eg : aclGroup?aclNumOrName=2000,aclMatchOrder=Config,aclStep=5,ls=x,vs=y
##-- Output          : NONE
##--
##-- Return          : list containg query string and hwcontext info
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------

def isdk_process_dicttofiltertree(drestapi,lxpathkey):
    filterElement = etree.Element('filter', type='subtree',nsmap={None : config.BASE_CAP_NAMESPACE})
    parentNode = filterElement
    
    ui = 0 
    for ui in range(len(lxpathkey)):
        if ui ==0 :
            parentNode = etree.SubElement(parentNode, lxpathkey[ui], 
                               attrib={'content-version' : config.CONTENT_VERSION,
                                        'format-version': config.FORMAT_VERSION}, 
                               nsmap={None : config.NETCONF_NAMESPACE})
            
        else:#parent node
            key = lxpathkey[ui]
            if drestapi.has_key(key):##
                delt = drestapi[key]
                #check for the delt is of type string,list,dic
                if isinstance(delt,str):#string type means has child
                    parentNode = etree.SubElement(parentNode, key)
                    
                elif isinstance(delt,list):#string type
                    ##[
                    ## {'ifName': 'NULL0'},
                    ## {'ifPhyType': None}, 
                    ##{'ifNumber': None}, 
                    ##{'ifAdminStatus': 'up'}, 
                    ##{'ifMac': None}, 
                    ##{'ifmAm4': None}]
                    parentNode = etree.SubElement(parentNode, key)
#                     newNode = None
                    for dic in delt:
                        skey = dic.keys()
                        skey = skey.pop()
                        value = dic.get(skey)
                        if drestapi.has_key(skey):
#                             parentNode = etree.SubElement(parentNode, skey)
                            break
                        if value != None :#value is present for the attribute
                            newNode = etree.SubElement(parentNode, skey)
                            newNode.text = value
                        else:#value is not present
                            newNode = etree.SubElement(parentNode, skey)
                elif isinstance(delt,dict):#string type
                    return "ERROR" 
                
    return etree.tostring(filterElement, pretty_print=True)

##---------------------------------------------------------------------------------------------
##-- Func Name       : isdk_ESN_parse_reply
##-- Date Created    : 28-01-2014
##-- Author          :
##-- Description     : Function call is query string peocessing for hwcontext element
##-- Input           : squerystring --> contains query string
##--                    eg : aclGroup?aclNumOrName=2000,aclMatchOrder=Config,aclStep=5,ls=x,vs=y
##-- Output          : NONE
##--
##-- Return          : list containg query string and hwcontext info
##--
##-- Caution         :
##---------------------------------------------------------------------------------------------
def isdk_ESN_parse_reply(srpcreplystring):
    
    """" it will parse the rpc-reply got from the device and get the ESN node ionformation from
    the rpc-reply
    """
    sRpcReply = str(srpcreplystring)
    tdoc = etree.fromstring(sRpcReply)

    for elt in tdoc.iterdescendants(tag="{http://www.huawei.com/netconf/vrp}esn"):
        ESNValue = elt.text
        return ESNValue
    return None